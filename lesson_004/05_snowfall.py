# -*- coding: utf-8 -*-

import simple_draw as sd

sd.resolution = (1200, 600)

# На основе кода из практической части реализовать снегопад:
# - создать списки данных для отрисовки N снежинок
# - нарисовать падение этих N снежинок
# - создать список рандомных длин лучей снежинок (от 10 до 100) и пусть все снежинки будут разные

N = 20

# TODO: удобнее будет создать 1 список, который будет хранить N маленьких словарей.
#  Каждый словарик будет иметь 3 ключа: 'x', 'y', 'length'.
#  .
#  Например, чтобы обратиться к значению 'Y' у 10ой снежинке можно будет использовать:
#       snowflakes[9]['y'] -= 10
#  .
#  Преимущество в том, что мы можем обходить 1 список в цикле, и обращаться к его элементам, как к объектам-снежинкам,
#  при этом удачно подобранные имена ключей 'x', 'y' сохраняют читабельность кода.
snowflakes = [[[n + sd.random_number(10, 1100), n + sd.random_number(500, 550)], sd.random_number(10, 100),
               sd.random_number(1, 10) * 0.1, sd.random_number(1, 10) * 0.1, sd.random_number(40, 80)]
              for n in range(N)]
for i in range(N):
    point = sd.get_point(snowflakes[i][0][0], snowflakes[i][0][1])
    sd.snowflake(point, snowflakes[i][1], sd.COLOR_WHITE, snowflakes[i][2], snowflakes[i][3], snowflakes[i][4])

# Пригодятся функции
# sd.get_point()
# sd.snowflake()
# sd.sleep()
# sd.random_number()
# sd.user_want_exit()

delta_x = 0
delta_y = 0
while True:
    sd.clear_screen()

    # TODO: range() тут не обязателен
    #  Здесь лучше будет использовать простой "цикл for". Пример:
    #           data = ['a', 'b', 'c']
    #  .
    #           for index in range(len(data)):          # было
    #               print(data[index])
    #  .
    #           for elem in data:                       # стало
    #               print(elem)
    #  .
    for i in range(N):
        delta = sd.random_number(-70, 10)
        # TODO: из-за изменения структуры, мы здесь получим "snowflake['x'] += ..."
        #  Что позволит сделает наш код читабельнее.
        x = snowflakes[i][0][0] + delta_x + delta
        y = snowflakes[i][0][1] + delta_y
        point = sd.get_point(x, y)
        sd.snowflake(point, snowflakes[i][1], sd.COLOR_WHITE, snowflakes[i][2], snowflakes[i][3], snowflakes[i][4])
    sd.sleep(0.1)

    # TODO: пусть координаты снежинок меняются (сейчас они неизменны и падают с одинаковой скоростью. Мы хотим сделать
    #  чтобы снежинки были независимы друг от друга, и даже так: если снежинка большая - пусть падает медленнее.
    #  Зажите скорость падения на размер снежинки).
    delta_y -= 10
    if delta_y < -550:
        break
    delta_x += 10
    if sd.user_want_exit():
        break
sd.pause()

# Примерный алгоритм отрисовки снежинок
#   навсегда
#     очистка экрана
#     для индекс, координата_х из списка координат снежинок
#       получить координата_у по индексу
#       изменить координата_у и запомнить её в списке по индексу
#       создать точку отрисовки снежинки по координатам
#       нарисовать снежинку белым цветом в этой точке
#     немного поспать
#     если пользователь хочет выйти
#       прервать цикл


# Часть 2 (делается после зачета первой части)
#
# Ускорить отрисовку снегопада
# - убрать clear_screen() из цикла: полная очистка всего экрана - долгая операция.
# - использовать хак для стирания старого положения снежинки:
#       отрисуем её заново на старом месте, но цветом фона (sd.background_color) и она исчезнет!
# - использовать функции sd.start_drawing() и sd.finish_drawing()
#       для начала/окончания отрисовки кадра анимации
# - между start_drawing и finish_drawing библиотека sd ничего не выводит на экран,
#       а сохраняет нарисованное в промежуточном буфере, за счет чего достигается ускорение анимации
# - в момент вызова finish_drawing все нарисованное в буфере разом покажется на экране
#
# Примерный алгоритм ускоренной отрисовки снежинок
#   навсегда
#     начать рисование кадра
#     для индекс, координата_х из списка координат снежинок
#       получить координата_у по индексу
#       создать точку отрисовки снежинки
#       нарисовать снежинку цветом фона
#       изменить координата_у и запомнить её в списке по индексу
#       создать новую точку отрисовки снежинки
#       нарисовать снежинку на новом месте белым цветом
#     закончить рисование кадра
#     немного поспать
#     если пользователь хочет выйти
#       прервать цикл


# Усложненное задание (делать по желанию)
# - сделать рандомные отклонения вправо/влево при каждом шаге
# - сделать сугоб внизу экрана - если снежинка долетает до низа, оставлять её там,
#   и добавлять новую снежинку
# Результат решения см https://youtu.be/XBx0JtxHiLg
